/// <reference types="jest" />
export declare const __redoclyClient: {
    isAuthorizedWithRedocly: jest.Mock<any, any>;
    isAuthorizedWithRedoclyByRegion: jest.Mock<any, any>;
    login: jest.Mock<any, any>;
    registryApi: {
        setAccessTokens: jest.Mock<any, any>;
        authStatus: jest.Mock<any, any>;
        prepareFileUpload: jest.Mock<any, any>;
        pushApi: jest.Mock<any, any>;
    };
};
export declare const RedoclyClient: jest.Mock<{
    isAuthorizedWithRedocly: jest.Mock<any, any>;
    isAuthorizedWithRedoclyByRegion: jest.Mock<any, any>;
    login: jest.Mock<any, any>;
    registryApi: {
        setAccessTokens: jest.Mock<any, any>;
        authStatus: jest.Mock<any, any>;
        prepareFileUpload: jest.Mock<any, any>;
        pushApi: jest.Mock<any, any>;
    };
}, []>;
export declare const loadConfig: jest.Mock<{
    configFile: null;
    lint: {
        addIgnore: jest.Mock<any, any>;
        skipRules: jest.Mock<any, any>;
        skipPreprocessors: jest.Mock<any, any>;
        saveIgnore: jest.Mock<any, any>;
        skipDecorators: jest.Mock<any, any>;
        ignore: null;
    };
}, []>;
export declare const getMergedConfig: jest.Mock<any, any>;
export declare const lint: jest.Mock<any, any>;
export declare const bundle: jest.Mock<{
    bundle: {
        parsed: null;
    };
    problems: null;
}, []>;
export declare const getTotals: jest.Mock<{
    errors: number;
}, []>;
export declare const formatProblems: jest.Mock<any, any>;
export declare const slash: jest.Mock<any, any>;
export declare const findConfig: jest.Mock<any, any>;
export declare const doesYamlFileExist: jest.Mock<any, any>;
